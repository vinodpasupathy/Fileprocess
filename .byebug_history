c
@im
@im=Product.pluck(:image)[0]
Product.pluck(:image)[0]
Product.where(:taxonomy=>i.id).pluck(:image)[0]
Product.where(:taxon=>i.id).pluck(:image)[0]
Product.where(:taxon=>i.id).pluck(:image)[0].flatten
Product.where(:taxon=>i.id).pluck(:image)[0]
Product.pluck(:image)[0]
Product.pluck(:image)
@im
c
Product.where(:id=>p.id).pluck(i.to_sym)[0]
c
params
@names
c
params
c
Product.where(:taxonomy_id=>BSON::ObjectId.from_string(i).pluck(:image)).flatten.to_a
Product.where(:taxonomy_id=>BSON::ObjectId.from_string(i)).flatten.to_a
Product.where(:taxonomy_id=>BSON::ObjectId.from_string(i)).to_a
Product.where(:taxonomy_id=>i).to_a
Product.where(:taxonomy_id=>image).to_a
Product.where(:taxonomy_id=>i.id).to_a
Product.where(:taxonomy_id=>i.id)
Product.where(:taxonomy_id)
Product.pluck(:image).Product.where(:taxon=>i.id)
Product.pluck(:image).taxonomy.where(:taxon=>i.id)
Product.pluck(:image).Taxonomy.where(:taxon=>i.id)
Product.pluck(:image)
Poduct.pluck(:image)
Poduct.pluck(:images)
Product.where(:taxonomy=>i.id).pluck(:image)
Taxonomy.where.(:image=>i.id)pluck.(:taxon_id)
Taxonomy.where.(:image=>i.id)pluck(:taxon_id)
Taxonomy.where.pluck(:taxon_id)
Taxonomy.where.pluck(:taxonomy_id)
pluck(:taxonomy_id)
Product.where(:image=>BSON::ObjectId.from_string(i.id)).to_a
Product.where(:taxonomy=>BSON::ObjectId.from_string(i.id)).to_a
Product.where(:taxonomy=>i.id).to_a
Product.where(:taxon=>i.id).to_a
Product.where(:image=>i.id).to_a
Product.where(:image=>i.id)
Product.where(:image=>i.id).pluck(:iteam_id)
Product.where(:taxon=>i.id).pluck(:image)
@im
c
params
c
Product.where(:taxonomy_id=>BSON::ObjectId.from_string(@taxon_id)).present?
Product.where(:taxonomy_id=>BSON::ObjectId.from_string(@taxon_id)).to_a
Product.where(:taxonomy_id=>BSON::ObjectId.from_string(@taxon_id))
c
Taxonomy.where(i.id=>"image").to_a
Taxonomy.where(i.id=>"image")
Taxonomy.where(i.id=>image)
Product.pluck(:image)..where(:taxonomy=>BSON::ObjectId.from_string(i.id))
Product.pluck(:image).product.where(:taxonomy=>BSON::ObjectId.from_string(i.id))
Product.pluck(:image).where(:taxonomy=>BSON::ObjectId.from_string(i.id))
Product.where(:taxonomy=>BSON::ObjectId.from_string(i.id)).pluck(:image)
Product.where(:taxonomy=>BSON::ObjectId.from_string(@taxon_id)).pluck(:image)
Product.pluck(:image)
Product.where(:taxonomy_id=>@product).pluck(:image)
Product.where(:taxonomy_id=>i.id).pluck(:image)
Product.where(:taxonomy_id=>i.id).pluck(:image).flatten[0]
c
params
exit
params
exit
{"a"=>1,"b"=>2,"c"=>3}.values
{"a"=>1,"b"=>2,"c"=>3}.valus
{"a"=>1,"b"=>2,"c"=>3}.keys
{"a"=>1,"b"=>2,"c"=>3}.slice
{"a"=>1,"b"=>2,"c"=>3}.slice!(*key)
{"a"=>1,"b"=>2,"c"=>3}.slice!(*keyset)
{"a"=>1,"b"=>2,"c"=>3}.slice!(*keys)
{"a"=>1","b"=>2,"c"=>3}.slice!(*keys)
Product.where(:taxonomy_id=>@paq).to_a
Product.where(:taxonomy_id=>@paq)
Product.where(:taxonomy_id=>@paq).pluck( :property)
Product.where(:taxonomy_id=>@paq).pluck( :property.slice!(*keys) ).to_a
Product.where(:taxonomy_id=>@paq).pluck( :property.slice!(*keyset) ).to_a
Product.where(:taxonomy_id=>@paq).pluck(:item_id)
Product.where(:taxonomy_id=>@paq).sort( {item_id:-1} ).pluck(:item_id)
Product.where(:taxonomy_id=>@paq).sort( {item_id:1} ).pluck(:item_id)
Product.where(:taxonomy_id=>@paq).sort( {_id:1} ).to_a
Product.where(:taxonomy_id=>@paq).sort( {_id:1} )
Product.where(:taxonomy_id=>@paq).where( {property:/i/} ).to_a
Product.where(:taxonomy_id=>@paq).where(:property=>/i/).to_a
Product.where(:taxonomy_id=>@paq).where(:property=>/p[1][i]/).to_a
Product.where(:taxonomy_id=>@paq).where(:property=>/i=>p[1][i]/).to_a
Product.where(:taxonomy_id=>@paq).where(:property=>{/i=>p[1][i]/}).to_a
Product.where(:taxonomy_id=>@paq).where(:property=>/{i=>p[1][i]}/).to_a
Product.where(:taxonomy_id=>@paq).where(:property=>/(i=>p[1][i]}/).to_a
Product.where(:taxonomy_id=>@paq).(:property=>/p[1][i]/).to_a
Product.where(:taxonomy_id=>@paq).(:property=>{/i=>p[1][i]/}).to_a
Product.where(:taxonomy_id=>@paq).(:property=>/i=>p[1][i]/).to_a
Product.where(:taxonomy_id=>@paq).(:property=>/(i=>p[1][i]}/).to_a
Product.where(:taxonomy_id=>@paq).exists(:property=>{i=>p[1][i]}).to_a
Product.where(:taxonomy_id=>@paq).any_of(:property=>{i=>p[1][i]}).to_a
Product.where(:taxonomy_id=>@paq).where(:property.in=>{i=>p[1][i]}).to_a
{i=>p[1][i]}
Product.where(:taxonomy_id=>@paq).where(:property=>{i=>p[1][i]}).to_a
Product.where(:taxonomy_id=>@paq).where(:property=>{i=>p[1][i]})
Product.where(:taxonomy_id=>@paq).where(:property=>{i})
Product.where(:taxonomy_id=>@paq).where(:property=>)
Product.where(:taxonomy_id=>@paq).pluck(:property)
p[1][i]
p[1]
puts i
Product.where(:taxonomy_id=>@paq).where(:property=>{i=>p[1][i]})
Product.where(:taxonomy_id=>@paq).where(:property=>{i=>p[1][i]}).to_a
Product.where(:taxonomy_id=>@paq).where(:property=>{i=>p[1][i]})
@pro_id
c
params
exit
@file[1]
@file[0]
@file=CSV.read(file.tempfile)
CSV.read(file.tempfile)
exit
CSV.read(file.tempfile).all
CSV.read(file.tempfile)
CSV.parse_line(file.tempfile)
CSV.parse_line(file.tempfile){|p| puts p[0]}
CSV.parse_line(file.tempfile, encoding: "utf-8", headers: :first_row){|p| puts p[0]}
CSV.foreach(file.tempfile, encoding: "utf-8", headers: :first_row){|p| puts p[0]}
CSV.foreach(file.tempfile, encoding: "bom|utf-8", headers: :first_row){|p| puts p[0]}
CSV.foreach(file.tempfile){|p| puts p[0]}
CSV.foreach(file.tempfile, :quote_char => "        "){|p| puts p[0]}
CSV.foreach(file.tempfile){|p| puts p[0]}
CSV.foreach(file.tempfile){|p| puts p[0][0]}
CSV.foreach(file.tempfile) do |csv|
CSV.read(file.tempfile)
require 'csv'
CSV.read(file.tempfile)
file.tempfile
exit
@pros[1][1]
@pros[1][1].keys
@pros[1][1][i]
@pros[1][1]
@pros[1][0]
@pros[1]
@pros[0]
@pros
Product.where(:taxonomy_id=>@paq).pluck(:property)
Product.where(:taxonomy_id=>@paq).pluck(:property)[0]
Product.where(:taxonomy_id=>@paq).pluck(:property)
@property
@property.collect{|i| i.keys}.flatten.uniq
p
exit
@ss=@attri_data.reject{|p| p[0]==nil || p[1]==nil}.map{|p| [p[0],p[1..-1].compact.join('  ')]}
Hash[*@ss.flatten]
Hash[*@ss]
@ss
@ss=@attri_data.reject{|p| p[0]==nil || p[1]==nil}.map{|p| [p[0],p[1..-1].compact.join('  ')]}
@attri_data.reject{|p| p[0]==nil || p[1]==nil}.map{|p| [p[0],p[1..-1].compact.join('  ')]}
@attri_data.reject{|p| p[0]==nil || p[1]==nil}.map{|p| [p[0]+p[1..-1].compact.join('  ')]}
@attri_data.reject{|p| p[0]==nil || p[1]==nil}.map{|p| Hash[p[0]=>p[1..-1].compact.join('  ')]}
@attri_data.reject{|p| p[0]==nil || p[1]==nil}
exit
Product.where(:taxonomy_id=>@paq).where(:property=>{i=>"7000"})
@ppp
hash1.merge(hash2){|key,oldval,newval| [*oldval].to_a + [*newval].to_a }
hash1.merge(hash2)
hash2={"c"=>4, "d"=>5,"a"=>3}
hash1={"a"=>1,"b"=>2,"c"=>3}
{{'a' => 1},{'a'=>2}}
{{'a' => 1},{'a'=>2}}.reverse_merge!
{{'a' => 1},{'a'=>2}}.merge
{{'a' => 1},{'a'=>2}}.merg
[{'a' => 1},{'a'=>2}]
{'a' => 1},{'a'=>2}
@ppp
Hash[*@ppp]
Hash[*@ppp.collect{|p| p.collect{|o,q| [o,q].flatten}.flatten}.flatten]
Hash[*@ppp]
@ppp= Product.where(:taxonomy_id=>@paq).pluck(:property).flatten.uniq
@ppp= Product.where(:taxonomy_id=>@paq).pluck(:property).flatten.uniq.inject(:merge)
@ppp= Product.where(:taxonomy_id=>@paq).pluck(:property).flatten.uniq.inject(merge)
@ppp= Product.where(:taxonomy_id=>@paq).pluck(:property).flatten.uniq.inject(&:merge)
@ppp= Product.where(:taxonomy_id=>@paq).pluck(:property).flatten.uniq[i]
@ppp= Product.where(:taxonomy_id=>@paq).pluck(:property).flatten.uniq
@ppp= Product.where(:taxonomy_id=>@paq).pluck(:property).flatten.uniq.count
@ppp= Product.where(:taxonomy_id=>@paq).pluck(:property).flatten.count
@ppp= Product.where(:taxonomy_id=>@paq).pluck(:property).uniq.count
@ppp= Product.where(:taxonomy_id=>@paq).pluck(:property).count
@ppp= Product.where(:taxonomy_id=>@paq).pluck(:property)
Product.where(:taxonomy_id=>@paq).where(:property=>{i=>"7000"})
Product.where(:taxonomy_id=>@paq).where(:property=>{i=>"7000"}).pluck(:id)
@ppp.flatten.each_slice(2).to_a[15]
Product.where(:taxonomy_id=>@paq).where(:property=>{i=>"7000"}).pluck(:id)
Product.where(:taxonomy_id=>@paq).where(:property=>{i=>"7000"}).to_a
Product.where(:taxonomy_id=>@paq).where(:property=>{i=>"7000"})
puts i
i
Product.where(:taxonomy_id=>@paq).where(:property.i=>"7000")
@ppp.flatten.each_slice(2).to_a[15]
@ppp.flatten.each_slice(2).to_a[14]
@ppp.flatten.each_slice(2).to_a[11]
@ppp.flatten.each_slice(2).to_a[8]
@ppp.flatten.each_slice(2).to_a[9]
@ppp.flatten.each_slice(2).to_a[10]
@ppp.flatten.each_slice(2).to_a[1]
@ppp.flatten.each_slice(2).to_a[0]
@ppp.flatten.each_slice(2).to_a.uniq.count
@ppp.flatten.each_slice(2).to_a.count
@ppp.flatten.each_slice(2).to_a.uniq
@ppp.flatten.each_slice(2).to_a.uniq.count
@ppp.flatten.each_slice(2).to_a.uniq
@ppp.flatten.each_slice(2).to_a.count
@ppp.flatten.each_slice(2).to_a
@ppp.flatten
@ppp.flatten.
@ppp.flatten.uniq
@ppp.flatten.uniq.count
@ppp.flatten.count
@ppp.count
@ppp.flatten.each_slice(2).to_a.uniq
@ppp.flatten.each_slice(2).to_a.count
@ppp.flatten.each_slice(2).to_a
@ppp.flatten..each_slice(2).to_a
@ppp.each_slice(2).to_a
@ppp[0].each_slice(2).to_a
@ppp[1]
@ppp.uniq.count
@ppp.count
@ppp[0]
@ppp= Product.where(:taxonomy_id=>@paq).pluck(:id,:property).collect{|o| o[1].flat_map{|x| [o[0],x]}.flatten}
 Product.where(:taxonomy_id=>@paq).pluck(:id,:property).collect{|o| o[1].flat_map{|x| [o[0],x]}.flatten}
exit
Product.where(:taxonomy_id=>@paq).pluck(:id,:property).collect{|o| o[1].flat_map{|x| [o[0],x]}.flatten}
Product.where(:taxonomy_id=>@paq).pluck(:id,:property).collect{|o| 0[1].flat_map{|x| [o[0],x]}.flatten}
Product.where(:taxonomy_id=>@paq).pluck(:id,:property).collect{|o| }
Product.where(:taxonomy_id=>@paq).pluck(:id,:property).collect{|o| [o[0],o[1]]}
Product.where(:taxonomy_id=>@paq).pluck(:id,:property).collect{|o| [o[0]+o[1]]}
Product.where(:taxonomy_id=>@paq).pluck(:id,:property).collect{|o| [o[0]+o[1]}
Product.where(:taxonomy_id=>@paq).pluck(:id,:property)
Product.where(:taxonomy_id=>@paq).pluck(:id,:property)%>
@pros.collect{|o| [o[0]]+[o[1].reduce({}, :merge)[i]]+["|"]}Product.where(:taxonomy_id=>@paq).pluck(:id,:property)%>
@pros.collect{|o| [o[0]]+[o[1].reduce({}, :merge)[i]]+["|"]}
@pros.collect{|o| [o[0]]+[o[1].reduce({}, :merge)[i]]+["|"]}.flatten
@pros.collect{|o| [o[0]]+[o[1].reduce({}, :merge)[i]]+["|"]}.flatten.uniq[0]
@pros.collect{|o| [o[0]]+[o[1].reduce({}, :merge)[i]]+["|"]}.flatten.uniq
@pros.collect{|o| [o[0]]+["|"]+[o[1].reduce({}, :merge)[i]]}.flatten.uniq.split("|")
@pros.collect{|o| [o[0]]+["|"]+[o[1].reduce({}, :merge)[i]]}.flatten.uniq
@pros.collect{|o| [o[0]]+"|"+[o[1].reduce({}, :merge)[i]]}.flatten.uniq
@pros.collect{|o| [o[0]]+[o[1].reduce({}, :merge)[i]]}.flatten.uniq
@pros.collect{|o| [o[0]]+[o[1].reduce({}, :merge)[i]]}.flatten
@pros.collect{|o| [[o[1].reduce({}, :merge)[i]]}.flatten.uniq
